from itsdangerous import URLSafeTimedSerializer, BadSignature
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandObject, Command, CommandStart
from config import SECRET_KEY
import aiohttp
from datetime import datetime
from app.keyboards import main_kb, notifications
from app.auth import auth, reg

router = Router()


@router.message(CommandStart())
async def start_command(message: Message, command: CommandObject):
    telegram_id = message.from_user.id
    args = command.args

    username = await auth(telegram_id)
    if username:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {username} üëãüèª!", reply_markup=main_kb)
        return
        
    if not args:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start 'token' ")
        return

    serializer = URLSafeTimedSerializer(SECRET_KEY)
    try:
        user_id = serializer.loads(args)
    except BadSignature:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    if await reg(user_id, telegram_id):
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∏ Telegram –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!",reply_markup=main_kb)
        return
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return


@router.message(F.text == 'üîñ –ú–æ–∏ –∑–∞–¥–∞—á–∏ üîñ')
async def my_tasks(message: Message):
    telegram_id = message.from_user.id  

    async with aiohttp.ClientSession() as session:
        async with session.get(
            "http://server:8000/api/tasks_tg",  
            params={"telegram_id": telegram_id}  
        ) as response:
            if response.status == 200:
                data = await response.json()
                tasks = data.get("tasks", [])

                if not tasks:
                    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
                else:
                    task_list = "\n".join([
                       f"üìå <i>{task['title']}</i>\n"
                       f"–î–µ–¥–ª–∞–π–Ω: {datetime.fromisoformat(task['deadline']).strftime('%d.%m.%Y –≤ %H:%M') if task.get('deadline') else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
                       for task in tasks])
                
                    await message.answer(f"üîñ <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n\n{task_list}", parse_mode="HTML")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚è∞")
async def notifications_settings(message: Message):
    telegram_id = message.from_user.id

    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://server:8000/api/user/notifications_get/{telegram_id}") as response:
            if response.status == 200:
                data = await response.json()
                current_state = data.get("notifications", True)
                status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if current_state else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

    await message.answer(
        f"üîî –í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å {status_text}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=notifications
    )

@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery):
    telegram_id = callback.from_user.id

    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://server:8000/api/user/notifications_get/{telegram_id}") as response:
            if response.status == 200:
                data = await response.json()
                current_state = data.get("notifications", True)
            else:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                    reply_markup=None
                )
                await callback.answer()
                return

    new_state = not current_state

    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"http://server:8000/api/user/notifications_update/{telegram_id}",
            json={"notifications": new_state}
        ) as response:
            if response.status != 200:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                    reply_markup=notifications
                )
                await callback.answer()
                return

    action = "–≤–∫–ª—é—á–∏–ª–∏" if new_state else "–≤—ã–∫–ª—é—á–∏–ª–∏"
    await callback.message.edit_text(
        f"‚úÖ –í—ã {action} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
        reply_markup=notifications
    )

    await callback.answer()
